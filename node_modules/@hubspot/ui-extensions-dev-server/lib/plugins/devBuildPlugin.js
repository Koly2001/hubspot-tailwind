const { ROLLUP_OPTIONS, WEBSOCKET_MESSAGE_VERSION } = require('../constants');
const { build } = require('vite');
const manifestPlugin = require('./manifestPlugin');
const { stripAnsiColorCodes } = require('../utils');
const codeCheckingPlugin = require('./codeCheckingPlugin');
const path = require('path');
const { logger } = require('@hubspot/cli-lib/logger');

function devBuildPlugin(options = {}) {
  const { extensionConfig, outputDir, baseMessage } = options;
  const versionedBaseMessage = {
    ...baseMessage,
    version: WEBSOCKET_MESSAGE_VERSION,
  };

  const handleBuildError = (error, server) => {
    const { plugin, hook, code, errors, frame, loc, id } = error;
    if (
      plugin === 'vite:esbuild' &&
      hook === 'transform' &&
      code === 'PLUGIN_ERROR'
    ) {
      server.ws.send({
        ...versionedBaseMessage,
        event: 'error',
        error: {
          type: 'transformation',
          details: {
            errors,
            formattedError: stripAnsiColorCodes(frame),
            location: loc,
            file: id,
          },
        },
      });
    }
  };

  const devBuild = async server => {
    try {
      await build({
        logLevel: 'warn',
        mode: 'development',
        define: {
          'process.env.NODE_ENV': JSON.stringify(
            process.env.NODE_ENV || 'development'
          ),
        },
        esbuild: {
          tsconfigRaw: {
            compilerOptions: {
              preserveValueImports: true,
            },
          },
        },
        build: {
          lib: {
            entry: extensionConfig.data.module.file,
            name: extensionConfig.output,
            formats: ['iife'],
            fileName: () => extensionConfig.output,
          },
          rollupOptions: {
            ...ROLLUP_OPTIONS,
            plugins: [
              manifestPlugin({
                minify: false,
                output: extensionConfig.output,
              }),
              codeCheckingPlugin({
                output: path.join(outputDir, extensionConfig.output),
              }),
            ],
            output: {
              ...ROLLUP_OPTIONS.output,
              sourcemap: 'inline',
            },
          },
          outDir: outputDir,
          emptyOutDir: true,
          minify: false,
        },
        clearScreen: false,
      });
      return true;
    } catch (error) {
      logger.debug(error);
      handleBuildError(error, server);
      return false;
    }
  };

  let localServer;
  return {
    name: 'ui-extensibility-dev-build-plugin',
    enforce: 'pre',
    configureServer: async server => {
      // Store a reference to the server to be used in hooks that don't get the server injected
      // See https://vitejs.dev/guide/api-plugin.html#configureserver for information on this pattern
      localServer = server;
      localServer.ws.on('connection', () => {
        logger.info('Browser connected and listening for bundle updates');
        localServer.ws.send({
          ...versionedBaseMessage,
          event: 'start',
        });
      });
      localServer.ws.on('build', async () => {
        logger.debug('Browser has requested a build, rebuilding');
        const successful = await devBuild(localServer);
        if (successful) {
          server.ws.send({
            ...versionedBaseMessage,
            event: 'update',
          });
        }
      });
      await devBuild(localServer);
    },
    handleHotUpdate: async ({ server }) => {
      const successful = await devBuild(server);

      if (!successful) {
        return [];
      }

      logger.info(`Extension ${extensionConfig.data.title} updated, compiled`);

      if (server.ws.clients.size === 0) {
        logger.debug('Bundle updated, no browsers connected to notify');
        return [];
      }

      logger.debug('Bundle updated, notifying connected browsers');
      server.ws.send({
        ...versionedBaseMessage,
        event: 'update',
      });
      return [];
    },
    buildEnd(error) {
      if (error) {
        logger.error(error);
      }
      logger.debug('Sending shutdown message to connected browsers');
      if (localServer && localServer.ws) {
        localServer.ws.send({
          ...versionedBaseMessage,
          event: 'shutdown',
        });
      }
    },
  };
}

module.exports = devBuildPlugin;
