const { build } = require('vite');
const { ROLLUP_OPTIONS, OUTPUT_DIR } = require('./constants');
const manifestPlugin = require('./plugins/manifestPlugin');
const path = require('path');
const { getUrlSafeFileName } = require('./utils');
const { loadConfig } = require('../cli/config');
const codeInjectionPlugin = require('./plugins/codeInjectionPlugin');

const allowedExtensions = ['.js', '.ts', '.tsx', '.jsx'];
const extensionErrorBaseMessage = `Supported file extensions are [${allowedExtensions.join(
  ', '
)}], received:`;

async function buildAllExtensions({ outputDir }) {
  const config = loadConfig();
  const extensionKeys = Object.keys(config);
  for (let i = 0; i < extensionKeys.length; ++i) {
    const { data } = config[extensionKeys[i]];

    await buildSingleExtension({
      file: data.module.file,
      outputDir,
      emptyOutDir: i === 0,
    });
  }
}

async function buildSingleExtension({
  file,
  outputDir = OUTPUT_DIR,
  emptyOutDir = true,
  minify = false,
  root = process.cwd(), // This is the vite default, so using that as our default
}) {
  const output = getUrlSafeFileName(file);
  await build({
    root,
    define: {
      'process.env.NODE_ENV': JSON.stringify(
        process.env.NODE_ENV || 'production'
      ),
    },
    build: {
      lib: {
        entry: file,
        name: output,
        formats: ['iife'],
        fileName: () => output,
      },
      rollupOptions: {
        ...ROLLUP_OPTIONS,
        plugins: [manifestPlugin({ output }), codeInjectionPlugin({ file })],
      },
      outDir: outputDir,
      emptyOutDir,
      minify,
    },
  });
}

async function remoteBuild(root, entryPoint, outputDir = OUTPUT_DIR) {
  const fileInfo = path.parse(entryPoint);

  if (!allowedExtensions.includes(fileInfo.ext)) {
    throw new Error(`${extensionErrorBaseMessage} ${fileInfo.ext}`);
  }

  const output = getUrlSafeFileName(entryPoint);
  await buildSingleExtension({
    file: entryPoint,
    outputFileName: output,
    outputDir,
    plugins: {
      rollup: [manifestPlugin({ minify: true, output })],
    },
    minify: true,
    root,
  });
}

module.exports = {
  buildAllExtensions,
  buildSingleExtension,
  remoteBuild,
  extensionErrorBaseMessage,
};
