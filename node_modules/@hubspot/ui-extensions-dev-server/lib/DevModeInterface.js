const { startDevMode } = require('./dev');
const path = require('path');
const { OUTPUT_DIR } = require('./constants');
const { loadExtensionConfig } = require('../cli/config');
const { logger, setLogLevel, LOG_LEVEL } = require('@hubspot/cli-lib/logger');

class DevModeInterface {
  _setDataFromExtensionConfig(extensionConfig) {
    this.config = extensionConfig;
    this.appName = extensionConfig.data.appName;
    this.title = extensionConfig.data.title;
  }

  _generateAppExtensionMappings(components) {
    // Loop over all of the app configs that are passed in
    const allComponentNames = Object.keys(components);

    return allComponentNames.reduce((appExtensionMappings, componentName) => {
      const component = components[componentName];
      if (!component.config.extensions?.crm?.cards) {
        return appExtensionMappings; // It's not an app
      }
      // Load all of the extension configs for a particular app.json file
      const extensionsConfigForApp = loadExtensionConfig(
        component.config,
        component.path
      );

      const extensionFilePaths = Object.keys(extensionsConfigForApp);
      // Loop over the loaded extension configs and generate the list of choices to use to prompt the user for input
      extensionFilePaths.forEach(extensionPath => {
        const extensionConfig = extensionsConfigForApp[extensionPath];
        appExtensionMappings.push({
          name: `${componentName}/${extensionConfig.data.title}`,
          value: extensionConfig,
        });
      });

      return appExtensionMappings;
    }, []);
  }

  async setup({
    debug = false,
    accountId,
    httpClient,
    promptUser,
    components,
    extensionConfig,
  }) {
    setLogLevel(debug ? LOG_LEVEL.DEBUG : LOG_LEVEL.LOG);
    this.accountId = accountId;
    this.httpClient = httpClient;
    if (extensionConfig) {
      this._setDataFromExtensionConfig(extensionConfig);
      return;
    }

    const choices = this._generateAppExtensionMappings(components);

    if (choices.length === 0) {
      throw new Error('No extensions to run');
    } else if (choices.length === 1) {
      this._setDataFromExtensionConfig(choices[0].value);
    } else {
      const answers = await promptUser({
        type: 'list',
        name: 'extension',
        message: 'Which extension would you like to run?',
        choices,
      });
      this._setDataFromExtensionConfig(answers.extension);
    }
  }

  async start({ debug = null }) {
    if (debug !== null) {
      setLogLevel(debug ? LOG_LEVEL.DEBUG : LOG_LEVEL.LOG);
    }
    if (!this.config || !this.config.path) {
      throw new Error(
        'Unable to load the required extension configuration files'
      );
    }
    const appPath = this.config.path;

    // Pass options from the CLI for running app functions locally
    const functionsConfig = {
      app: { path: appPath },
      accountId: this.accountId,
      httpClient: this.httpClient,
    };

    this.shutdown = await startDevMode({
      extensionConfig: this.config,
      outputDir: path.join(this.config.extensionPath, OUTPUT_DIR),
      functionsConfig,
      root: appPath,
    });

    logger.info(`Running extension '${this.title}' from app '${this.appName}'`);
  }

  async cleanup() {
    if (this.shutdown) {
      await this.shutdown();
    }
  }
}

module.exports = new DevModeInterface();
