const fs = require('fs');
const path = require('path');
const { getUrlSafeFileName } = require('../lib/utils');
const { MAIN_APP_CONFIG } = require('../lib/constants');

function loadConfigByPath(configPath) {
  const source = fs.readFileSync(configPath);
  return JSON.parse(source);
}

function loadExtensionConfig(appConfig, appPath) {
  const crmCardsSubConfigFiles = appConfig?.extensions?.crm?.cards;

  const outputConfig = {};

  crmCardsSubConfigFiles.forEach(card => {
    const cardConfigPath = path.join(appPath, card.file);

    try {
      const cardConfig = loadConfigByPath(cardConfigPath);

      if (cardConfig && cardConfig.data) {
        const cardConfigDir = path.parse(cardConfigPath).dir;

        const entryPointPath = path.join(
          cardConfigDir,
          cardConfig.data?.module?.file
        );

        cardConfig.data.module.file = entryPointPath;

        outputConfig[entryPointPath] = {
          ...cardConfig,
          output: getUrlSafeFileName(entryPointPath),
          path: appPath,
          extensionPath: path.parse(entryPointPath).dir,
          data: {
            ...cardConfig.data,
            appName: appConfig.name,
          },
        };
      }
    } catch (e) {
      throw new Error(`Unable to load ${cardConfigPath}`);
    }
  });

  return outputConfig;
}

/**
 * @deprecated Will be removed after integration with hubspot-cli is complete
 * This version of load config makes assumptions about the location it is being ran from where the others do not
 */
function loadConfig() {
  // app.json is one level up from the extensions directory, which is where these commands
  // will need to be ran from, the extensions directory
  const configPath = path.join(process.cwd(), '..', MAIN_APP_CONFIG);

  const mainAppConfig = loadConfigByPath(configPath);

  const crmCardsSubConfigFiles = mainAppConfig?.extensions?.crm?.cards;
  if (!crmCardsSubConfigFiles || crmCardsSubConfigFiles.length === 0) {
    throw new Error(
      `The "extensions.crm.cards" array in ${configPath} is missing or empty, it is a required configuration property`
    );
  }

  const outputConfig = {};

  crmCardsSubConfigFiles.forEach(card => {
    const cardConfigPath = path.join(process.cwd(), '..', card.file);
    try {
      const cardConfig = loadConfigByPath(cardConfigPath);
      if (!cardConfig.data) {
        throw new Error(
          `Invalid config file at path ${cardConfigPath}, data is a required config property`
        );
      }

      if (!cardConfig.data.module) {
        throw new Error(
          `Invalid config file at path ${cardConfigPath}, data.module is a require property`
        );
      }

      // Path.join with a single argument will strip off any relative prefixing such as './'
      const entryPointPath = path.join(cardConfig.data.module.file);

      cardConfig.data.module.file = entryPointPath;

      outputConfig[entryPointPath] = cardConfig;
      outputConfig[entryPointPath].data.appName = mainAppConfig.name;
    } catch (e) {
      if (e?.code === 'MODULE_NOT_FOUND') {
        throw new Error(
          `Unable to load "${cardConfigPath}" file. \nPlease make sure you are running the command from the src/app/extensions directory and that your card JSON config exists within it.`
        );
      }
      throw e;
    }
  });

  return outputConfig;
}

module.exports = {
  loadConfigByPath,
  loadExtensionConfig,
  loadConfig,
};
