#!/usr/bin/env node

const { parseArgs, showHelp } = require('../cli/utils');
const {
  buildAllExtensions,
  buildSingleExtension,
  DevModeInterface,
} = require('../index');

const path = require('path');
const { MAIN_APP_CONFIG, OUTPUT_DIR } = require('../lib/constants');
const inquirer = require('inquirer');
const { loadConfigByPath, loadExtensionConfig } = require('./config');

// eslint-disable-next-line no-floating-promise/no-floating-promise
(async () => {
  const { DEV_MODE, BUILD_MODE, extension, help } = parseArgs();

  if (help || !(DEV_MODE || BUILD_MODE)) {
    showHelp(OUTPUT_DIR);
  } else if (DEV_MODE) {
    const extensionPath = process.cwd(); // Assumed to be /path/to/src/app/extensions
    const appPath = path.join(extensionPath, '..');
    const appConfig = loadConfigByPath(path.join(appPath, MAIN_APP_CONFIG));

    let extensionConfig;
    if (extension) {
      const allExtensionsConfig = loadExtensionConfig(appConfig, appPath);
      extensionConfig =
        allExtensionsConfig[path.join(extensionPath, extension)];
    }
    await DevModeInterface.setup({
      promptUser: inquirer.createPromptModule(),
      components: {
        [appConfig.name]: {
          config: appConfig,
          path: path.join(extensionPath, '..'),
        },
      },
      extensionConfig,
    });

    await DevModeInterface.start({});
  } else if (BUILD_MODE) {
    if (extension) {
      buildSingleExtension({
        file: extension,
        outputDir: OUTPUT_DIR,
      });
    } else {
      buildAllExtensions({ outputDir: OUTPUT_DIR });
    }
  }
})();

async function shutdown() {
  await DevModeInterface.cleanup();
  process.exit(0);
}

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);
