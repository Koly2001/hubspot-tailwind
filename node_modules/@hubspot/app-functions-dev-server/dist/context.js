"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildContext = exports.fetchObjectContext = void 0;
const utils_1 = require("./utils");
function fetchObjectContext(config, objectQuery) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (!objectQuery) {
            return {};
        }
        const { objectId, objectTypeId, objectPropertyNames } = objectQuery;
        const propertyNames = objectPropertyNames.filter(field => field);
        if (propertyNames.length === 0) {
            return {};
        }
        const propertiesQueryParam = `&properties=${propertyNames
            .filter(field => field)
            .join(',')}`;
        const uri = `/crm/v3/objects/${objectTypeId}/${objectId}?archived=false${propertiesQueryParam}`;
        try {
            const object = yield config.httpClient.get(config.accountId, {
                uri,
            });
            const propertiesToSend = (0, utils_1.filterMap)((_a = object === null || object === void 0 ? void 0 : object.properties) !== null && _a !== void 0 ? _a : {}, objectPropertyNames);
            return {
                propertiesToSend,
            };
        }
        catch (err) {
            throw new Error(`Cannot fetch context object properties: ${err}`);
        }
    });
}
exports.fetchObjectContext = fetchObjectContext;
function buildContext(config, localExecutionInputs) {
    return __awaiter(this, void 0, void 0, function* () {
        const { objectQuery, parameters, event } = localExecutionInputs;
        const objectContext = yield fetchObjectContext(config, objectQuery);
        return Object.assign({ propertiesToSend: {}, parameters,
            event }, objectContext);
    });
}
exports.buildContext = buildContext;
//# sourceMappingURL=context.js.map